import streamlit as st
import requests
import time

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
AZURE_ENDPOINT = "https://ai-patentforecast-playground999373195511.services.ai.azure.com/models"
API_VERSION = "2024-12-01-preview"
ANALYZER_ID = "patent_categorisation"
SUBSCRIPTION_KEY = "–≤—Å—Ç–∞–≤_—Ç—É—Ç_—Å–≤—ñ–π_–∫–ª—é—á"  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –∫–ª—é—á

def get_analyze_url():
    return f"{AZURE_ENDPOINT}/contentunderstanding/analyzers/{ANALYZER_ID}:analyze?api-version={API_VERSION}"

def begin_analysis_with_file(file_bytes):
    headers = {
        "Content-Type": "application/octet-stream",
        "Ocp-Apim-Subscription-Key": SUBSCRIPTION_KEY,
        "x-ms-useragent": "cu-sample-ui"
    }
    response = requests.post(get_analyze_url(), headers=headers, data=file_bytes)
    response.raise_for_status()
    return response.headers["operation-location"]

def poll_result(operation_location: str):
    headers = {
        "Ocp-Apim-Subscription-Key": SUBSCRIPTION_KEY
    }
    start = time.time()
    while True:
        res = requests.get(operation_location, headers=headers)
        res.raise_for_status()
        result = res.json()
        status = result.get("status", "").lower()
        if status == "succeeded":
            return result
        elif status == "failed":
            raise RuntimeError("–ê–Ω–∞–ª—ñ–∑ –Ω–µ –≤–¥–∞–≤—Å—è.")
        time.sleep(1)
        if time.time() - start > 60:
            raise TimeoutError("–ê–Ω–∞–ª—ñ–∑ –ø–µ—Ä–µ–≤–∏—â–∏–≤ –ª—ñ–º—ñ—Ç —á–∞—Å—É")

def extract_class_label(result: dict) -> str:
    """
    –í–∏—Ç—è–≥—É—î –Ω–∞–∑–≤—É –∫–ª–∞—Å—É —ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∞–Ω–∞–ª—ñ–∑—É.
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ result –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó analyzer.
    –¢—É—Ç –ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è predictions[0]["class"]
    """
    try:
        return result["result"]["predictions"][0]["class"]
    except Exception:
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–ª–∞—Å —ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É."

# Streamlit UI
st.title("Patent Classification (Local File Upload)")

uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂ .txt –∞–±–æ .pdf —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É", type=["txt", "pdf"])

if uploaded_file is not None:
    if st.button("–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏"):
        try:
            file_bytes = uploaded_file.read()  # –ù–ï –¥–µ–∫–æ–¥—É—î–º–æ
            with st.spinner("–ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è..."):
                operation_location = begin_analysis_with_file(file_bytes)
                result = poll_result(operation_location)
                class_label = extract_class_label(result)
            st.success(f"üß† –ö–ª–∞—Å –≤–∏–∑–Ω–∞—á–µ–Ω–æ: {class_label}")
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
